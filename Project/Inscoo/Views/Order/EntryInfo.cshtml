@model Models.Order.EntryInfoModel

@{
    ViewBag.Title = "信息录入";
}
<div class="orderConfirm">
    <ul class="orderConfirmLi">
        <li>
            <i class="fa fa-save fa-2x"></i>
            <span>方案确认</span>
        </li>
        <li class="orderConfirmLiActive">
            <i class="fa fa-edit fa-2x"></i>
            信息填写
        </li>
        <li>
            <i class="fa fa-cloud-upload fa-2x"></i>
            上传文件
        </li>
        <li>
            <i class="fa fa-usd fa-2x"></i>
            确认付款
        </li>
    </ul>
</div>


@using (Html.BeginForm("EntryInfo", "Order", FormMethod.Post, new { @id = "EntryInfoForm" }))
{
    @Html.AntiForgeryToken()
    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
    @Html.HiddenFor(model => model.IsUploadInfo)


    <div class="orderEntryInfoBody">
        <p class="basic-information"><i class="fa fa-edit fa-2x"></i>基本信息</p>
        <ul>
            <li>
                @Html.LabelFor(model => model.CompanyName, htmlAttributes: new { @class = "control-label" })：
            </li>
            <li>
                @Html.EditorFor(model => model.CompanyName, new { htmlAttributes = new { @class = "form-control" } })
            </li>
            <li>
                @Html.ValidationMessageFor(model => model.CompanyName, "", new { @class = "text-danger" })
            </li>
        </ul>

        <ul>
            <li>
                @Html.LabelFor(model => model.Linkman, htmlAttributes: new { @class = "control-label" })：
            </li>
            <li>
                @Html.EditorFor(model => model.Linkman, new { htmlAttributes = new { @class = "form-control" } })
            </li>
            <li>
                @Html.ValidationMessageFor(model => model.Linkman, "", new { @class = "text-danger" })
            </li>
        </ul>
        <ul>
            <li>
                @Html.LabelFor(model => model.Address, htmlAttributes: new { @class = "control-label" })：
            </li>
            <li>
                @Html.EditorFor(model => model.Address, new { htmlAttributes = new { @class = "form-control" } })
                <sapn style="color:#888;">(保单及发票寄送)</sapn>
            </li>
            <li>
                @Html.ValidationMessageFor(model => model.Address, "", new { @class = "text-danger" })

            </li>
        </ul>
        <ul>
            <li>
                @Html.LabelFor(model => model.PhoneNumber, htmlAttributes: new { @class = "control-label" })：
            </li>
            <li>
                @Html.EditorFor(model => model.PhoneNumber, new { htmlAttributes = new { @class = "form-control" } })
            </li>
            <li>
                @Html.ValidationMessageFor(model => model.PhoneNumber, "", new { @class = "text-danger" })
            </li>
        </ul>


        <p class="basic-information" style="margin-top:140px;"><i class="fa fa-edit fa-2x"></i>详细信息填写</p>
        <ul>
            <li>
                @Html.LabelFor(model => model.StartDate, htmlAttributes: new { @class = "control-label" })：
            </li>
            <li>
                <input readonly="readonly" type="text" name="StartDate" id="StartDate" class="form-control" value="@DateTime.Now.AddDays(4).ToShortDateString()" />
                @*@Html.EditorFor(model => model.StartDate, new {htmlAttributes = new {@class = "", type = "date"}})*@
            </li>
        </ul>
    </div>

}
@using (Html.BeginForm("UploadEmp", "Order", FormMethod.Post, new { @class = "orderEntryInfoBody", enctype = "multipart/form-data" }))
{
    <ul style="margin-left:20px;">
        <li>
            <label>
                上传员工名单：
            </label>
        </li>
        <li>
            <input type="hidden" value=@Model.Id name="Id" />
            <input type="file" id="empinfo" name="empinfo" />
        </li>
        <li>
            <input type="submit" value="上传" class="btn btn-default" />
            <a href=@Model.EmpInfoFileUrl target="_blank" class="btn btn-default">下载模板</a>
        </li>
    </ul>
    <div style="line-height:2em;width:45%;text-align:left;float:left;">
        @if (!string.IsNullOrEmpty(ViewBag.error))
        {
            <span class="text-danger">@ViewBag.error</span><br />
        }
        @if (TempData["error"] != null)
        {
            <span class="text-danger">@TempData["error"]</span><br />
        }
        <span class="text-danger" id="error"></span>
    </div>
}
<div class="orderConfirmBodyNext">
    <div>
        <a href="/">返回</a>
    </div>
    <div>
        @if (Model.State < 4)
        {
            <input type="button" value="下一步" onclick="subInfo()" class="orderConfirmNextSubmit" />
        }
        else
        {
            <input type="button" value="下一步" onclick="errorInfo()" class="orderConfirmNextSubmit" />
        }
    </div>
</div>
@using (Ajax.BeginForm("UploadEmp", null, new AjaxOptions { HttpMethod = "get", UpdateTargetId = "dadaGrid" }, new { id = "searchForm" }))
{
    <input type="hidden" name="Id" value=@Model.Id />
    <div class="employeeInfo" id="dadaGrid">
        @Html.Action("UploadEmp")
    </div>
}

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    <script>
        jQuery(function() {
            jQuery("#StartDate")
                .datepicker({
                    startDate: '@DateTime.Now.AddDays(4).ToShortDateString()'
                });
        });
        var count = @Model.IsUploadInfo

        function subInfo() {
            var startDate = $("#StartDate").val();
            if (count > 0) {
                if (dateCompare(startDate)) {
                    $("#EntryInfoForm").submit();
                } else {
                    $("#error").text("生效时间最早为三日之后，请重新选择");
                }
            } else {
                $("#error").text("还未上传人员资料");
            }
        }

        function errorInfo() {
            $("#error").text("订单已送出审核，无法修改信息");
        }

        function dateCompare(startdate) {
            @{
                var ts = DateTime.Now.AddDays(3).ToUniversalTime() - DateTime.Parse("1970-1-1");
            }
            var nowDate = @ts.TotalMilliseconds.ToString("0");
            var arr=new Array();
            if(startdate.indexOf("-")>0){
                arr = startdate.split("-");
            }
            if(startdate.indexOf("/")>0){
                arr = startdate.split("/");
            }
            var starttime = new Date(arr[0], arr[1] - 1, arr[2]);
            var starttimes = starttime.getTime();
            if (nowDate <= starttimes && !isNaN(starttimes)) {
                return true;
            } else
                return false;
        }
    </script>
}
