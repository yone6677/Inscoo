@model Models.TRegisterModel

@{
    ViewBag.Title = "创建账户";
}
@section head {
    <link href="~/Content/chosen.min.css" rel="stylesheet" />
    <style>

    </style>
}
@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()
    @Html.HiddenFor(m => m.Type)
    @Html.HiddenFor(m => m.Id)
    <select class="form-control valid" id="CommissionMethod" name="CommissionMethod" disabled="">
        <option value="Nothing">无</option>
        <option value="Item">按保障项目计算</option>
        <option value="Amount">按销售金额计算</option>
    </select>
    <div class="form-horizontal formCreate">
        <br />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        @if (Model.Type == "Create")
        {
            <div class="form-group">
                @Html.LabelFor(model => model.Roles, htmlAttributes: new { @class = "control-label col-md-3" })
                <div class="col-md-9">
                    @Html.DropDownList("Roles", Model.RoleSelects, new { @class = "form-control" })
                </div>
            </div>
        }
        else
        {
            <div class="form-group">
                @Html.LabelFor(model => model.Roles, htmlAttributes: new { @class = "control-label col-md-3" })
                <label class="control-label col-md-9" style="text-align:left">@Model.Roles</label>
            </div>
        }
        @if (Model.Type != "Detail")
        {

            <div class="form-group">
                @Html.LabelFor(model => model.EncryBeginDate, htmlAttributes: new { @class = "control-label col-md-3" })
                <div class="col-md-9">
                    @if (Model.EncryBeginDate.HasValue)
                    {
                        <input class="form-control inputDate" readonly value="@Model.EncryBeginDate.Value.ToShortDateString()" />
                    }
                    else
                    {
                        @Html.EditorFor(model => model.EncryBeginDate, new { htmlAttributes = new { @class = "form-control inputDate", @readonly = "" } })
                    }
                    @Html.ValidationMessageFor(model => model.EncryBeginDate, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="form-group">
                @Html.LabelFor(model => model.EncryEndDate, htmlAttributes: new { @class = "control-label col-md-3" })
                <div class="col-md-9">
                    @if (Model.EncryEndDate.HasValue)
                    {
                        <input class="form-control inputDate" readonly value="@Model.EncryEndDate.Value.ToShortDateString()" / />
                    }
                    else
                    {
                        @Html.EditorFor(model => model.EncryEndDate, new { htmlAttributes = new { @class = "form-control inputDate", @readonly = "" } })
                    }
                    @Html.ValidationMessageFor(model => model.EncryEndDate, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="form-group">
                @Html.LabelFor(model => model.CompanyName, htmlAttributes: new { @class = "control-label col-md-3" })
                <div class="col-md-9">
                    @Html.EditorFor(model => model.CompanyName, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.CompanyName, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="form-group">
                @Html.LabelFor(model => model.CommissionMethod, htmlAttributes: new { @class = "control-label col-md-3" })
                <div class="col-md-9">
                    @if (Model.CommissionMethods != null)
                    {
                        @Html.DropDownList("CommissionMethod", Model.CommissionMethods, new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.CommissionMethod, "", new { @class = "text-danger" })
                    }
                    else
                    {
                        <label>@ViewBag.CommissionMethod</label>
                    }
                </div>
            </div>
            <div class="form-group">
                @Html.LabelFor(model => model.ProdInsurances, htmlAttributes: new { @class = "control-label col-md-3 " })
                <div class="col-md-9">
                    @Html.ListBoxFor(m => m.ProdInsurances, ViewBag.ProdInsurancesList as IEnumerable<SelectListItem>, new { @class = "form-control chosen-select", multiple = "multiple", data_placeholder = "选择保险公司" })
                </div>
            </div>
            <div class="form-group">
                @Html.LabelFor(model => model.ProdSeries, htmlAttributes: new { @class = "control-label col-md-3" })
                <div class="col-md-9">
                    @Html.ListBoxFor(m => m.ProdSeries, ViewBag.ProdSeriesList as IEnumerable<SelectListItem>, new { @class = "form-control chosen-select", multiple = "multiple", data_placeholder = "选择保险系列" })
                </div>
            </div>
            <div class="form-group" id="roleChange">
                @Html.LabelFor(model => model.FanBao, htmlAttributes: new { @class = "control-label col-md-3" })
                <div class="col-md-offset-1 col-md-2">
                    <div class="checkbox">
                        @Html.EditorFor(model => model.FanBao)
                        @Html.ValidationMessageFor(model => model.FanBao, "", new { @class = "text-danger" })
                    </div>
                </div>
                @Html.LabelFor(model => model.TiYong, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-offset-1 col-md-2">
                    <div class="checkbox">
                        @Html.EditorFor(model => model.TiYong)
                        @Html.ValidationMessageFor(model => model.TiYong, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Rebate, htmlAttributes: new { @class = "control-label col-md-3" })
                <div class="col-md-8">
                    @Html.EditorFor(model => model.Rebate, new { htmlAttributes = new { @class = "form-control", max = ViewBag.maxRebate, min = 0 } })
                    @Html.ValidationMessageFor(model => model.Rebate, "", new { @class = "text-danger" })
                </div>
                <div class="col-md-1">
                    <label class="control-label">%</label>
                </div>
            </div>
        }
        else
        {
            <div class="form-group">
                @Html.LabelFor(model => model.EncryBeginDate, htmlAttributes: new { @class = "control-label col-md-3" })
                @if (Model.EncryBeginDate.HasValue)
                    {
                    <label class="control-label col-md-9" style="text-align:left">@Model.EncryBeginDate.Value.ToShortDateString()</label>
                }
            </div>
            <div class="form-group">
                @Html.LabelFor(model => model.EncryEndDate, htmlAttributes: new { @class = "control-label col-md-3" })
                @if (Model.EncryEndDate.HasValue)
                    {
                    <label class="control-label col-md-9" style="text-align:left">@Model.EncryEndDate.Value.ToShortDateString()</label>
                }
            </div>
            <div class="form-group">
                @Html.LabelFor(model => model.CompanyName, htmlAttributes: new { @class = "control-label col-md-3" })
                <label class="control-label col-md-9" style="text-align:left">@Model.CompanyName</label>
            </div>
            <div class="form-group">
                @Html.LabelFor(model => model.CommissionMethod, htmlAttributes: new { @class = "control-label col-md-3" })
                <div class="col-md-9">
                    @if (Model.CommissionMethods != null)
                    {
                        @Html.DropDownList("CommissionMethod", Model.CommissionMethods, new { @class = "form-control", disabled = "" })
                    }
                    else
                    {
                        <label>@ViewBag.CommissionMethod</label>
                    }
                </div>
            </div>
            <div class="form-group">
                @Html.LabelFor(model => model.ProdInsurances, htmlAttributes: new { @class = "control-label col-md-3 " })
                <div class="col-md-9">
                    @Html.ListBoxFor(m => m.ProdInsurances, ViewBag.ProdInsurancesList as IEnumerable<SelectListItem>, new { @class = "form-control chosen-select", multiple = "multiple", data_placeholder = "选择保险公司", disabled = "" })
                </div>
            </div>
            <div class="form-group">
                @Html.LabelFor(model => model.ProdSeries, htmlAttributes: new { @class = "control-label col-md-3" })
                <div class="col-md-9">
                    @Html.ListBoxFor(m => m.ProdSeries, ViewBag.ProdSeriesList as IEnumerable<SelectListItem>, new { @class = "form-control chosen-select", multiple = "multiple", data_placeholder = "选择保险系列", disabled = "" })
                </div>
            </div>
            <div class="form-group" id="roleChange">
                @Html.LabelFor(model => model.FanBao, htmlAttributes: new { @class = "control-label col-md-3" })
                <div class="col-md-offset-1 col-md-2">
                    <div class="checkbox">
                        @Html.DisplayFor(model => model.FanBao)
                        @Html.ValidationMessageFor(model => model.FanBao, "", new { @class = "text-danger" })
                    </div>
                </div>
                @Html.LabelFor(model => model.TiYong, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-offset-1 col-md-2">
                    <div class="checkbox">
                        @Html.DisplayFor(model => model.TiYong)
                        @Html.ValidationMessageFor(model => model.TiYong, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Rebate, htmlAttributes: new { @class = "control-label col-md-3" })
                <div class="col-md-8">
                    @Html.DisplayFor(model => model.Rebate, new { htmlAttributes = new { @class = "form-control", max = ViewBag.maxRebate, min = 0 } })
                    @Html.ValidationMessageFor(model => model.Rebate, "", new { @class = "text-danger" })
                </div>
                <div class="col-md-1">
                    <label class="control-label">%</label>
                </div>
            </div>
        }

        @*<div class="form-group">
                @Html.LabelFor(model => model.IsDelete, htmlAttributes: new { @class = "control-label col-md-3" })
                <div class="col-md-offset-1 col-md-5">
                    <div class="checkbox">
                        @Html.EditorFor(model => model.IsDelete)
                        @Html.ValidationMessageFor(model => model.IsDelete, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>*@
        <div class="form-group">
            <div class="col-md-offset-3 col-md-6">
                @if (Model.Type == "Create")
                {
                    <input type="submit" value="保存" class="btn btn-info" />
                }
                else if (Model.Type == "Detail")
                {

                }
                else if (Model.Type == "Delete")
                {
                    <input type="submit" value="确定删除" class="btn btn-info" />
                }
                else if (Model.Type == "Edit")
                {
                    <input type="submit" value="确定修改" class="btn btn-info" />
                }
                @Html.ActionLink("返回列表", "TIndex", null, htmlAttributes: new { @class = "btn btn-default" })
            </div>
        </div>
    </div>
}


@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    <script src="~/Scripts/chosen.jquery.min.js"></script>
    <script type="text/javascript">
        jQuery(function () {
            TongleWhenRoleChange();
            jQuery(".chosen-select").chosen();
        });
        jQuery("#Roles")
            .change(function () {
                TongleWhenRoleChange();
            });

        function TongleWhenRoleChange() {
            var value = jQuery("#Roles").val();
            //console.log(value);
            //console.log(value == "PartnerChannel");
            if (value == "PartnerChannel") {
                jQuery("#roleChange").show();
            } else {
                jQuery("#roleChange").hide();
            }
        }

    </script>
}
